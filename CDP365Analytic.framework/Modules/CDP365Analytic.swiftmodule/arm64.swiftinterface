// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CDP365Analytic
import AdSupport
import AppTrackingTransparency
@_exported import CDP365Analytic
import CoreLocation
import CoreTelephony
import CryptoKit
import Foundation
import MapKit
import Security
import Swift
import SystemConfiguration
import UIKit
import WebKit
public protocol Dispatcher {
  func send(event: CDP365Analytic.ANEvent, success: @escaping () -> (), failure: @escaping (Swift.Error) -> ())
}
public protocol EnumCollection : Swift.Hashable {
  static func cases() -> Swift.AnySequence<Self>
  static var allValues: [Self] { get }
}
extension EnumCollection {
  public static func cases() -> Swift.AnySequence<Self>
  public static var allValues: [Self] {
    get
  }
}
@_hasMissingDesignatedInitializers final public class URLSessionDispatcher : CDP365Analytic.Dispatcher {
  final public func send(event: CDP365Analytic.ANEvent, success: @escaping () -> (), failure: @escaping (Swift.Error) -> ())
  @objc deinit
}
@objc public enum ANLogLevel : Swift.Int {
  case verbose = 10
  case debug = 20
  case info = 30
  case warning = 40
  case error = 50
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol ANLogger {
  @objc func log(_ message: @autoclosure () -> Swift.String, with level: CDP365Analytic.ANLogLevel, file: Swift.String, function: Swift.String, line: Swift.Int)
}
@_hasMissingDesignatedInitializers final public class ANDisabledLogger : CDP365Analytic.ANLogger {
  @objc final public func log(_ message: @autoclosure () -> Swift.String, with level: CDP365Analytic.ANLogLevel, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  @objc deinit
}
@objc final public class ANDefaultLogger : ObjectiveC.NSObject, CDP365Analytic.ANLogger {
  @objc public init(minLevel: CDP365Analytic.ANLogLevel)
  @objc final public func log(_ message: @autoclosure () -> Swift.String, with level: CDP365Analytic.ANLogLevel, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  @objc deinit
  @objc override dynamic public init()
}
open class ITKeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: CDP365Analytic.ITKeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: CDP365Analytic.ITKeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: CDP365Analytic.ITKeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
public struct ITKeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
public enum ITKeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: CDP365Analytic.ITKeychainSwiftAccessOptions, b: CDP365Analytic.ITKeychainSwiftAccessOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public typealias Parameters = [Swift.String : Any]
public struct ANEvent {
}
extension ANEvent {
  public init(screenName: Swift.String? = "", categoryName: Swift.String? = "", actionName: Swift.String? = "", items: [Foundation.NSDictionary]? = [], extra: Foundation.NSDictionary? = nil, dimension: [Foundation.NSDictionary]? = [])
}
public struct ANConfigure : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objc public class CDP365Analytic : ObjectiveC.NSObject {
  @objc public static func configure()
  @objc public static func logEvent(screenName: Swift.String)
  @objc public static func logEvent(categoryName: Swift.String, actionName: Swift.String, items: [Foundation.NSDictionary]? = nil, extra: Foundation.NSDictionary? = nil, dimension: [Foundation.NSDictionary]? = nil)
  @objc public static func resetAnonymousId()
  @objc deinit
  @objc override dynamic public init()
}
public let ReachabilityChangedNotification: Swift.String
@objc public class ITReachability : ObjectiveC.NSObject {
  public typealias NetworkReachable = (CDP365Analytic.ITReachability) -> ()
  public typealias NetworkUnreachable = (CDP365Analytic.ITReachability) -> ()
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: CDP365Analytic.ITReachability.NetworkStatus, b: CDP365Analytic.ITReachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: CDP365Analytic.ITReachability.NetworkReachable?
  public var whenUnreachable: CDP365Analytic.ITReachability.NetworkUnreachable?
  public var reachableOnWWAN: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  public var currentReachabilityStatus: CDP365Analytic.ITReachability.NetworkStatus {
    get
  }
  public var currentReachabilityString: Swift.String {
    get
  }
  required public init?(reachabilityRef: SystemConfiguration.SCNetworkReachability?)
  convenience public init?(hostname: Swift.String)
  public class func reachabilityForInternetConnection() -> CDP365Analytic.ITReachability?
  public func startNotifier() -> Swift.Bool
  public func stopNotifier()
  public func isReachable() -> Swift.Bool
  public func isReachableViaWWAN() -> Swift.Bool
  public func isReachableViaWiFi() -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public struct SDKError : Swift.Error {
}
extension SDKError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension CDP365Analytic.ANLogLevel : Swift.Equatable {}
extension CDP365Analytic.ANLogLevel : Swift.Hashable {}
extension CDP365Analytic.ANLogLevel : Swift.RawRepresentable {}
extension CDP365Analytic.ITKeychainSwiftAccessOptions : Swift.Equatable {}
extension CDP365Analytic.ITKeychainSwiftAccessOptions : Swift.Hashable {}
extension CDP365Analytic.ITReachability.NetworkStatus : Swift.Equatable {}
extension CDP365Analytic.ITReachability.NetworkStatus : Swift.Hashable {}
